>>> from game_of_life import *
>>> game = board(10)
>>> isinstance(game, dict)
True
>>> len(game)
100
>>> set(game.keys()) == {(i,j) for i in range(10) for j in range(10)}
True
>>> set(game.values()) == {False}
True
>>> len(board(11)) == 121
True
>>> is_alive(game, (3,5))
False
>>> game[3, 5] = True
>>> game[3, 5] == True
True
>>> is_alive(game, (3,5))
True
>>> not is_alive(game, (0,0)) and not is_alive(game, (9,9))
True
>>> set_alive(game, (0,1), True)
>>> is_alive(game, (0,1))
True
>>> get_size(game)**2 == len(game)
True
>>> get_size(board(11)) == 11
True
>>> game_copy = copy_board(game)
>>> game_copy == game
True
>>> game_copy is game
False
>>> for cell in get_iterator(game):
...     print(str(cell).replace(' ',''))
... 
((0,0),False)
((0,1),True)
((0,2),False)
((0,3),False)
((0,4),False)
((0,5),False)
((0,6),False)
((0,7),False)
((0,8),False)
((0,9),False)
((1,0),False)
((1,1),False)
((1,2),False)
((1,3),False)
((1,4),False)
((1,5),False)
((1,6),False)
((1,7),False)
((1,8),False)
((1,9),False)
((2,0),False)
((2,1),False)
((2,2),False)
((2,3),False)
((2,4),False)
((2,5),False)
((2,6),False)
((2,7),False)
((2,8),False)
((2,9),False)
((3,0),False)
((3,1),False)
((3,2),False)
((3,3),False)
((3,4),False)
((3,5),True)
((3,6),False)
((3,7),False)
((3,8),False)
((3,9),False)
((4,0),False)
((4,1),False)
((4,2),False)
((4,3),False)
((4,4),False)
((4,5),False)
((4,6),False)
((4,7),False)
((4,8),False)
((4,9),False)
((5,0),False)
((5,1),False)
((5,2),False)
((5,3),False)
((5,4),False)
((5,5),False)
((5,6),False)
((5,7),False)
((5,8),False)
((5,9),False)
((6,0),False)
((6,1),False)
((6,2),False)
((6,3),False)
((6,4),False)
((6,5),False)
((6,6),False)
((6,7),False)
((6,8),False)
((6,9),False)
((7,0),False)
((7,1),False)
((7,2),False)
((7,3),False)
((7,4),False)
((7,5),False)
((7,6),False)
((7,7),False)
((7,8),False)
((7,9),False)
((8,0),False)
((8,1),False)
((8,2),False)
((8,3),False)
((8,4),False)
((8,5),False)
((8,6),False)
((8,7),False)
((8,8),False)
((8,9),False)
((9,0),False)
((9,1),False)
((9,2),False)
((9,3),False)
((9,4),False)
((9,5),False)
((9,6),False)
((9,7),False)
((9,8),False)
((9,9),False)
>>> for cell in get_iterator(board(4)):
...     print(str(cell).replace(' ',''))
... 
((0,0),False)
((0,1),False)
((0,2),False)
((0,3),False)
((1,0),False)
((1,1),False)
((1,2),False)
((1,3),False)
((2,0),False)
((2,1),False)
((2,2),False)
((2,3),False)
((3,0),False)
((3,1),False)
((3,2),False)
((3,3),False)
>>> iterator = get_iterator(game)
>>> str(next(iterator)).replace(' ','')
'((0,0),False)'
>>> str(next(iterator)).replace(' ','')
'((0,1),True)'
>>> str(next(iterator)).replace(' ','')
'((0,2),False)'
>>> for cell in get_iterator({(0, 0): False, (1, 0): False, (0, 2): False, (0, 1): False, (1, 1): False, (2, 1): False, (2, 2): False, (1, 2): False, (2, 0): False}):
...     print(str(cell).replace(' ',''))
... 
((0,0),False)
((0,1),False)
((0,2),False)
((1,0),False)
((1,1),False)
((1,2),False)
((2,0),False)
((2,1),False)
((2,2),False)
>>> print_board(game)
⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜
⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
>>> print_board(board(5))
⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜
⬜⬜⬜⬜⬜
>>> neighbors((0,0)) == {(0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1), (1, 0), (1, -1), (1, 1)}
True
>>> neighbors((10,2)) == {(9, 1), (9, 2), (11, 2), (9, 3), (11, 3), (11, 1), (10, 1), (10, 3)}
True
>>> neighbors((2,1000)) == {(2, 999), (2, 1001), (3, 1000), (1, 1000), (3, 1001), (1, 1001), (1, 999), (3, 999)}
True
>>> place_blinker(game)
>>> sum(is_alive(game, (i, 0)) for i in range(3)) == 3
True
>>> sum(is_alive(game, (i, j)) for i in range(3) for j in range(2)) == 4 and not is_alive(game, (1,1)) and not is_alive(game, (2,1))
True
>>> place_blinker(game, (3, 8))
>>> sum(is_alive(game, (i, 8)) for i in range(3, 6))
3
>>> place_glider(game)
>>> sum(is_alive(game, (i, j)) for i in range(3) for j in range(3)) == 8 and not is_alive(game, (1,1))
True
>>> place_glider(game, (6,3))
>>> sum(is_alive(game, (i,j)) for i in range(6,9) for j in range(3,6)) == 5 and not is_alive(game, (6,3)) and not is_alive(game, (6,4)) and not is_alive(game, (7,4)) and not is_alive(game, (8,3))
True
>>> game = board(3)
>>> place_blinker(game, (0, 1))
>>> tick(game)
>>> sum(is_alive(game, (i,j)) for i in range(3) for j in range(3)) == 3 and sum(is_alive(game, (1,j)) for j in range(3)) == 3
True
>>> tick(game)
>>> sum(is_alive(game, (i,j)) for i in range(3) for j in range(3)) == 3 and sum(is_alive(game, (j,1)) for j in range(3)) == 3
True
>>> set_alive(game, (1,0), True)
>>> tick(game)
>>> sum(is_alive(game, (i,j)) for i in range(3) for j in range(3)) == 7 and sum(is_alive(game, (1,j)) for j in range(3)) == 3
True
>>> tick(game)
>>> sum(is_alive(game, (i,j)) for i in range(3) for j in range(3)) == 5 and sum(is_alive(game, (j,1)) for j in range(3)) == 0 and not is_alive(game, (1,0))
True
>>> tick(game)
>>> sum(is_alive(game, (i,j)) for i in range(3) for j in range(3)) == 3 and sum(is_alive(game, (i,j)) for (i,j) in {(0,1), (1,2), (2,1)}) == 3
True
>>> tick(game)
>>> sum(is_alive(game, (i,j)) for i in range(3) for j in range(3)) == 2 and sum(is_alive(game, (i,j)) for (i,j) in {(1,1), (1,2)}) == 2
True
>>> tick(game)
>>> sum(is_alive(game, (i,j)) for i in range(3) for j in range(3)) == 0
True
>>> tick(game)
>>> sum(is_alive(game, (i,j)) for i in range(3) for j in range(3)) == 0
True
